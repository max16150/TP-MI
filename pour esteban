import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.JButton;
import javax.swing.JToggleButton;
import java.awt.Color;
import javax.swing.JTabbedPane;
import javax.swing.BoxLayout;

public class Dialog<A, B, C>{
	Class<A> aType;
	A aV;
	Class<B> bType;
	B bV;
	Class<C> cType;
	C cV;
/*
	Dialog(String title, String a){
		this(title, a, b, "");
	}

	Dialog(String title, String a, String b){
		this(title, a, b, "");
	}
*/
	Dialog(String title, String a, String b, String c, Class<A> tA, Class<B> tB, Class<C> tC){

		this.aType = tA;
		this.bType = tB;
		this.cType = tC;

		JTextField xField = new JTextField(4);
		JTextField yField = new JTextField(4);
		JTextField zField = new JTextField(4);

		int ok = 0;


		while (ok == 0 || ok == 2) {



			JPanel panel = new JPanel(new BorderLayout(10,10));

			JPanel text = new JPanel(new GridLayout(0,1,2,2));

			text.add(new JLabel(a, SwingConstants.RIGHT));
			text.add(new JLabel(b, SwingConstants.RIGHT));
			text.add(new JLabel(c, SwingConstants.RIGHT));
				

			JPanel field = new JPanel(new GridLayout(0,1,2,2));
			field.add(xField);
			field.add(yField);
			field.add(zField);

			if (ok == 2) {
				JLabel error_message = new JLabel("Veuillez renseigner les champs avec des valeurs num√©riques !");
				error_message.setForeground(Color.RED);

				panel.add(error_message, BorderLayout.NORTH);
			}



			panel.add(text, BorderLayout.WEST);
			panel.add(field, BorderLayout.CENTER);

				
			int result = JOptionPane.showConfirmDialog(
				frame, panel, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

			if (result == JOptionPane.OK_OPTION) {
				try {
					if (aType.isAssignableFrom(Integer.class)) {
						aV = (A) Integer.valueOf(xField.getText());
					} else if(aType.isAssignableFrom(String.class)) {
						aV = (A) xField.getText();
					} else if(cType.isAssignableFrom(Float.class)) {
						aV = (A) Float.valueOf(xField.getText());
					} else {
						ok = 2;
					}

					if (bType.isAssignableFrom(Integer.class)) {
						bV = (B) Integer.valueOf(yField.getText());
					} else if(bType.isAssignableFrom(String.class)) {
						bV = (B) yField.getText();
					} else if(cType.isAssignableFrom(Float.class)) {
						bV = (B) Float.valueOf(yField.getText());
					} else {
						ok = 2;
					}

					if (cType.isAssignableFrom(Integer.class)) {
						cV = (C) Integer.valueOf(zField.getText());
					} else if(cType.isAssignableFrom(String.class)) {
						cV = (C) zField.getText();
					} else if(cType.isAssignableFrom(Float.class)) {
						cV = (C) Float.valueOf(zField.getText());
					} else {
						ok = 2;
					}

					println(xField.getText() + "	" + yField.getText() + "	" + zField.getText());
					println(aV + "	" + bV + "	" + cV);

					ok = 1;
				} catch(Exception  e) {
					ok = 2;
				}
			} else {
				ok = 1;
			}
		}

	}

	public A getA(){
		return this.aV;
	}

	public B getB(){
		return this.bV;
	}

	public C getC(){
		return this.cV;
	}			
}

public class Liste<T>{
	private T value;
	private Liste<T> nextList;

	public Liste(){

	}

	private Liste(T value){
		this.value = value;
	}

	private Liste<T> getNext(){
		return this.nextList;
	}

	private Liste<T> getLast(){
		Liste<T> occurence = this;
		for (int i = 0; occurence.getNext() != null; i++) {
			occurence = occurence.getNext();
		}
		return occurence;
	}

	private Liste<T> getOccurency(int index){
		Liste<T> occurence = this;
		for (int i = 0; i<index ; i++) {
			occurence = occurence.getNext();
		}
		return occurence;
	}

	public void add(T value){
		Liste<T> instance = this;
		if (instance.value == null) {
			instance.value = value;
		} else {
			instance = instance.getLast();
			instance.nextList = new Liste(value);
		}
	}

	public void remove(int index){
		if (index == 0) {
			this.value = this.getNext().value;
			this.nextList = this.getNext().nextList;
			return;
		}
		Liste<T> occurencyBefore = this.getOccurency(index-1);
		Liste<T> occurencyAfter = this.getOccurency(index+1);
		occurencyBefore.nextList = occurencyAfter;
	}

	public void put(T value, int index){
		Liste<T> toPutList = new Liste(value);
		if (index == 0) {
			toPutList.nextList = this;
			this.value = toPutList.value;
			this.nextList = toPutList.nextList;
			return;
		}
		Liste<T> occurencyBefore = this.getOccurency(index-1);
		Liste<T> occurencyAfter = this.getOccurency(index+1);
		occurencyBefore.nextList = occurencyAfter;
	}

	public int size(){
		int i = 0;
		Liste<T> occurence = this;
		for (i = 0; occurence != null && occurence.value != null; i++) {
			occurence = occurence.getNext();
		}
		return i;
	}

	public void show(){
		Liste<T> occurence = this;
		for (int i = 0; i<this.size(); i++) {
			System.out.println(occurence.value);
			occurence = occurence.getNext();
		}
	}

	public T get(int index){
		Liste<T> occurence = this;
		T value;
		for (int i = 0; i<index; i++) {
			occurence = occurence.getNext();
			if (i+1 == index) {
				return occurence.value;
			}
		}
		return occurence.value;
	}
}

public class Arete{
	private int sommet_initial;
	private int sommet_final;
	private float cout;

	public Arete(int i, int f, float c){
		this.sommet_initial = i;
		this.sommet_final = f;
		this.cout = c;
	}

	public int getInitial(){
		return this.sommet_initial;
	}

	public int getFinale(){
		return this.sommet_final;
	}

	public float getCout(){
		return this.cout;
	}

	public void setInitial(int i){
		this.sommet_initial = i;
	}

	public void setFinale(int f){
		this.sommet_final = f;
	}

	public void setCout(float c){
		this.cout = c;
	}

	public void draw(Graphe g){
		int ecart = 15;

		int xA = g.getSommet(this.sommet_initial).getX();
		int xB = g.getSommet(this.sommet_final).getX();

		int yA = g.getSommet(this.sommet_initial).getY();
		int yB = g.getSommet(this.sommet_final).getY();

		float distAB = dist(xA, yA, xB, yB);

		int x1 = int(xA - (ecart*(xA-xB)/distAB));
		int y1 = int(yA + (ecart*(yB-yA)/distAB));

		int x2 = int(xA - ((distAB-ecart)*(xA-xB)/distAB));
		int y2 = int(yA + ((distAB-ecart)*(yB-yA)/distAB));

		arrow(x1, y1, x2, y2);
	}

	void arrow(int xA, int yA, int xB, int yB) {
		float size = 4;
		pushMatrix();
			translate(xB, yB);
			rotate(atan2(yB - yA, xB - xA));
			triangle(- size * 2 , - size, 0, 0, - size * 2, size);
		popMatrix();
		line(xA, yA, xB, yB);  
	}
}

public class Sommet{
	private int index;
	private int posX;
	private int posY;
	private String name;

	public Sommet(int index){
		this(width/2, height/2, index, "");
	}

	public Sommet(int x, int y, int index){
		this(x, y, index, "");
	}

	public Sommet(int x, int y, int index, String str){
		this.posX = x;
		this.posY = y;
		this.index = index;
		this.name = str;
	}

	public int getX(){
		return this.posX;
	}

	public int getY(){
		return this.posY;
	}

	public void draw(){

		if (dist(mouseX, mouseY, this.posX, this.posY) < 15) {

			frame.setCursor(hand_corsor);

			fill(0,255,0);

			if (mousePressed) {
				this.posX = mouseX;
				this.posY = mouseY;
			}
		}

		String msg = Integer.toString(this.index);

		if (!this.name.equals("")) {
			msg = msg + " - " + this.name;
		}

		text(msg, this.posX, this.posY - 8);
		ellipse(this.posX, this.posY, 5, 5);
		fill(0);
	}
}

public class Graphe{
	private int n;
	private int nbAretes;
	private Arete[] lesAretes;
	private Liste<Arete> aretes;
	private Liste<Sommet> sommets;


	public Graphe(){
		this.aretes = new Liste<Arete>();
		this.sommets = new Liste<Sommet>();
	}

	public Sommet getSommet(int i){
		return this.sommets.get(i-1);
	}

	public void addSommet(){
		Sommet nouveau_sommet = new Sommet((int)random(100,width-100), (int)random(100,height-100), sommets.size()+1);
		this.sommets.add(nouveau_sommet);
	}

	public void addArete(int a, int b, float cout){
		Arete nouvelle_arete = new Arete(a, b, cout);
		this.aretes.add(nouvelle_arete);
	}

	public void draw(){
		// on affiche les sommets
		for (int i =0; i<sommets.size(); i++) {
			sommets.get(i).draw();
		}
		// on affiche les aretes
		for (int i =0; i<aretes.size(); i++) {
			aretes.get(i).draw(this);
		}
	}
}


Frame box;
JFrame frame;
Graphe g;

void setup() {
	//this.frame.setVisible(false);
	surface.setSize(900,400);
	surface.setResizable(true);
	//surface.hideCursor();
	frame = (JFrame) ((processing.awt.PSurfaceAWT.SmoothCanvas)this.getSurface().getNative()).getFrame();
	frame.setTitle("Graphe Controller");

	box = new Frame();

	//Graphe graphe = saisie_graphe();
	//afficher_matrice(adjacence(graphe));

	g = new Graphe();
	
}

Cursor hand_corsor = new Cursor(Cursor.HAND_CURSOR);
Cursor normal_cursor = new Cursor(Cursor.DEFAULT_CURSOR);

void draw(){
	frame.setCursor(normal_cursor);
	background(255,255,255);
	textAlign(CENTER);
	//textSize(16);
	fill(0);
	g.draw();


/*
	rectMode(CENTER);
	rect(width/2,height/2,100,100);

	if (mouseX > width/2-50 && mouseX < width/2+50 && mouseY > height/2-50 && mouseY < height/2+50) {
		frame.setCursor(hand_corsor);
	} else {
		frame.setCursor(normal_cursor);
	}
	*/

}

public class Frame extends JFrame implements ActionListener {

	JMenuItem action_exit;
	JMenuItem action_new_top;
	JMenuItem action_new_side;

	JMenuItem action_calcul_matrice_transitive;
	JMenuItem action_calcul_matrice_adjacente;
	JMenuItem action_remove_top;
	JMenuItem action_remove_side;

	JPanel panel;

	public Frame() {
		JMenuBar barre = new JMenuBar();

		frame.setJMenuBar(barre);

		JMenu menu = new JMenu("Menu");
		barre.add(menu);

		JMenu calcul_menu = new JMenu("Calculer");
		action_calcul_matrice_adjacente = new JMenuItem("Matrice Adjacente");
		action_calcul_matrice_transitive = new JMenuItem("Matrice Transitive");
		action_calcul_matrice_adjacente.addActionListener(this);
		action_calcul_matrice_transitive.addActionListener(this);
		calcul_menu.add(action_calcul_matrice_adjacente);
		calcul_menu.add(action_calcul_matrice_transitive);

		action_new_top = new JMenuItem("Ajouter un Sommet");
		action_new_side = new JMenuItem("Ajouter une Ar√™te");
		action_remove_top = new JMenuItem("Supprimer un Sommet");
		action_remove_side = new JMenuItem("Supprimer une Ar√™te");
		action_exit = new JMenuItem("Quitter");
		action_new_top.addActionListener(this);
		action_new_side.addActionListener(this);
		action_remove_top.addActionListener(this);
		action_remove_side.addActionListener(this);
		action_exit.addActionListener(this);


		menu.add(action_new_top);
		menu.add(action_new_side);
		menu.addSeparator();
		menu.add(calcul_menu);
		menu.addSeparator();
		menu.add(action_remove_top);
		menu.add(action_remove_side);
		menu.addSeparator();
		menu.add(action_exit);

		frame.setVisible(true);
	}

	public void actionPerformed(ActionEvent e) { 

		Object src = e.getSource();

		if (src == action_new_top) {
			println("Ajouter un nouveau sommet");
			g.addSommet();
	

		} else if (src == action_new_side) {
			System.out.println("Ajouter une nouvelle ar√™te");

			Dialog dial = new Dialog<Integer, Integer, Float>(
				"Nouvelle ar√™te",
				"Sommet de d√©part de l'ar√™te :",
				"Sommet de fin de l'ar√™te :",
				"Co√ªt de l'ar√™te :",
				Integer.class,
				Integer.class,
				Float.class);
			
			if (dial.getA() != null && dial.getB() != null && dial.getC() != null) {
				int a = (int)dial.getA();
				int b = (int)dial.getB();
				float c = (float)dial.getC();

				g.addArete(a, b, c);
			}
			

		} else if (src == action_remove_side) {
			System.out.println("Supprimer une ar√™te");


		} else if (src == action_remove_top) {
			System.out.println("Supprimer un sommet");


		} else if (src == action_calcul_matrice_transitive) {
			System.out.println("Calcul de la matrice transitive");


		} else if (src == action_calcul_matrice_adjacente) {
			System.out.println("Calcul de la matrice adjacente");


		} else if (src == action_exit) {
			exit();
		}
	}
}
